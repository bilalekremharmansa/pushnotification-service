// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pushservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// PushNotificationServiceClient is the client API for PushNotificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PushNotificationServiceClient interface {
	Send(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushResponse, error)
}

type pushNotificationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPushNotificationServiceClient(cc grpc.ClientConnInterface) PushNotificationServiceClient {
	return &pushNotificationServiceClient{cc}
}

func (c *pushNotificationServiceClient) Send(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushResponse, error) {
	out := new(PushResponse)
	err := c.cc.Invoke(ctx, "/push.PushNotificationService/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PushNotificationServiceServer is the server API for PushNotificationService service.
// All implementations must embed UnimplementedPushNotificationServiceServer
// for forward compatibility
type PushNotificationServiceServer interface {
	Send(context.Context, *PushRequest) (*PushResponse, error)
	mustEmbedUnimplementedPushNotificationServiceServer()
}

// UnimplementedPushNotificationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPushNotificationServiceServer struct {
}

func (UnimplementedPushNotificationServiceServer) Send(context.Context, *PushRequest) (*PushResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedPushNotificationServiceServer) mustEmbedUnimplementedPushNotificationServiceServer() {
}

// UnsafePushNotificationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PushNotificationServiceServer will
// result in compilation errors.
type UnsafePushNotificationServiceServer interface {
	mustEmbedUnimplementedPushNotificationServiceServer()
}

func RegisterPushNotificationServiceServer(s grpc.ServiceRegistrar, srv PushNotificationServiceServer) {
	s.RegisterService(&_PushNotificationService_serviceDesc, srv)
}

func _PushNotificationService_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushNotificationServiceServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/push.PushNotificationService/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushNotificationServiceServer).Send(ctx, req.(*PushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PushNotificationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "push.PushNotificationService",
	HandlerType: (*PushNotificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _PushNotificationService_Send_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/pushservice/push.proto",
}
